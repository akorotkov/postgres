sudo: required
addons:
  apt:
    packages:
      - gdb
      - lcov
      - libipc-run-perl
      - libperl-dev
      - libpython-dev
      - tcl-dev
      - libldap2-dev
      - libicu-dev
      - docbook
      - docbook-dsssl
      - docbook-xsl
      - libxml2-utils
      - openjade1.3
      - opensp
      - xsltproc
language: c
cache: ccache
before_install:
  - echo '/tmp/%e-%s-%p.core' | sudo tee /proc/sys/kernel/core_pattern
  - echo "deb http://archive.ubuntu.com/ubuntu xenial main" | sudo tee /etc/apt/sources.list.d/xenial.list > /dev/null
  - |
    sudo tee -a /etc/apt/preferences.d/trusty > /dev/null <<EOF
    Package: *
    Pin: release n=xenial
    Pin-Priority: 1
    
    Package: make
    Pin: release n=xenial
    Pin-Priority: 500
    EOF
  - sudo apt-get update && sudo apt-get install make
script: ./configure --enable-debug --enable-cassert --enable-coverage --enable-tap-tests --with-tcl --with-python --with-perl --with-ldap --with-icu && make -j4 all contrib docs && make -Otarget -j3 check-world
after_success:
  - bash <(curl -s https://codecov.io/bash)
after_failure:
  - for f in ` find . -name regression.diffs ` ; do echo "========= Contents of $f" ; head -1000 $f ; done
  - |
    for corefile in $(find /tmp/ -name '*.core' 2>/dev/null) ; do
      binary=$(gdb -quiet -core $corefile -batch -ex 'info auxv' | grep AT_EXECFN | perl -pe "s/^.*\"(.*)\"\$/\$1/g")
      echo dumping $corefile for $binary
      gdb --batch --quiet -ex "thread apply all bt full" -ex "quit" $binary $corefile
    done


env:
  global:
    # COVERITY_SCAN_TOKEN
    # ** specific to your project **
    - secure: "66dUcjaxG2bNu-cXsc1Ksw"

addons:
  coverity_scan:

    # GitHub project metadata
    # ** specific to your project **
    project:
      name: kommiharibabu/postgres
      version: 11devel
      description: My PostgreSQL Project

    # Where email notification of build analysis results will be sent
    notification_email: kommi.haribabu@gmail.com

    # Commands to prepare for build_command
    # ** likely specific to your build **
    build_command_prepend: ./configure --enable-debug --enable-cassert --enable-coverage --enable-tap-tests --with-tcl --with-python --with-perl --with-ldap --with-icu

    # The command that will be added as an argument to "cov-build" to compile your project for analysis,
    # ** likely specific to your build **
    build_command: make -j4 all contrib

    # Pattern to match selecting branches that will run analysis. We recommend leaving this set to 'coverity_scan'.
    # Take care in resource usage, and consider the build frequency allowances per
    #   https://scan.coverity.com/faq#frequency
    branch_pattern: master, coverity_scan
